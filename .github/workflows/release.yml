name: Release and Publish

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run check

      - name: Build extensions
        run: npm run build

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Update manifest versions
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION_NUMBER }}"
          
          # Update Chrome manifest
          jq --arg version "$VERSION" '.version = $version' dist/chrome/manifest.json > dist/chrome/manifest.tmp.json
          mv dist/chrome/manifest.tmp.json dist/chrome/manifest.json
          
          # Update Firefox manifest
          jq --arg version "$VERSION" '.version = $version' dist/firefox/manifest.json > dist/firefox/manifest.tmp.json
          mv dist/firefox/manifest.tmp.json dist/firefox/manifest.json

      - name: Package Chrome extension
        run: |
          cd dist/chrome
          zip -r ../../chrome-extension-${{ steps.get_version.outputs.VERSION }}.zip .
          cd ../..

      - name: Package Firefox extension
        run: |
          cd dist/firefox
          zip -r ../../firefox-extension-${{ steps.get_version.outputs.VERSION }}.zip .
          cd ../..

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## Changes in this Release
            
            ### Chrome Extension
            - Download: chrome-extension-${{ steps.get_version.outputs.VERSION }}.zip
            
            ### Firefox Extension
            - Download: firefox-extension-${{ steps.get_version.outputs.VERSION }}.zip
            
            ### Installation Instructions
            
            #### Chrome
            1. Download the Chrome extension ZIP file
            2. Open Chrome and navigate to `chrome://extensions/`
            3. Enable "Developer mode"
            4. Click "Load unpacked" and select the extracted folder
            
            #### Firefox
            1. Download the Firefox extension ZIP file
            2. Open Firefox and navigate to `about:debugging`
            3. Click "This Firefox" 
            4. Click "Load Temporary Add-on"
            5. Select the ZIP file or manifest.json from the extracted folder
          draft: true
          prerelease: false

      - name: Upload Chrome extension to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./chrome-extension-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: chrome-extension-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Firefox extension to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./firefox-extension-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: firefox-extension-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

  publish-chrome:
    needs: build-and-package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Chrome extension
        run: npm run build

      - name: Get version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Update Chrome manifest version
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION_NUMBER }}"
          jq --arg version "$VERSION" '.version = $version' dist/chrome/manifest.json > dist/chrome/manifest.tmp.json
          mv dist/chrome/manifest.tmp.json dist/chrome/manifest.json

      - name: Package Chrome extension for store
        run: |
          cd dist/chrome
          zip -r ../../chrome-store.zip .
          cd ../..

      # Note: This step requires setting up Chrome Web Store API credentials
      # You'll need to add these secrets to your repository:
      # - CHROME_CLIENT_ID
      # - CHROME_CLIENT_SECRET
      # - CHROME_REFRESH_TOKEN
      # - CHROME_EXTENSION_ID
      - name: Publish to Chrome Web Store
        uses: mnao305/chrome-extension-upload@v5.0.0
        if: env.CHROME_EXTENSION_ID != ''
        with:
          file-path: chrome-store.zip
          extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
        env:
          CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}

  publish-firefox:
    needs: build-and-package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Firefox extension
        run: npm run build

      - name: Get version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Update Firefox manifest version
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION_NUMBER }}"
          jq --arg version "$VERSION" '.version = $version' dist/firefox/manifest.json > dist/firefox/manifest.tmp.json
          mv dist/firefox/manifest.tmp.json dist/firefox/manifest.json

      - name: Package Firefox extension for store
        run: |
          cd dist/firefox
          zip -r ../../firefox-store.zip .
          cd ../..

      # Note: This step requires setting up Firefox Add-ons API credentials
      # You'll need to add these secrets to your repository:
      # - FIREFOX_API_KEY
      # - FIREFOX_API_SECRET
      - name: Publish to Firefox Add-ons
        uses: firefox-actions/web-ext@v1
        if: env.FIREFOX_API_KEY != ''
        with:
          cmd: sign
          source: dist/firefox
          channel: listed
          apiKey: ${{ secrets.FIREFOX_API_KEY }}
          apiSecret: ${{ secrets.FIREFOX_API_SECRET }}
        env:
          FIREFOX_API_KEY: ${{ secrets.FIREFOX_API_KEY }}